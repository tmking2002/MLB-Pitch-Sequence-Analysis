setwd("C:/Users/tmkin/Downloads/Projects/MLB Pitch Sequence Flowchart")
data <- read_csv("2022 PBP.csv")
library(tidyverse)
library(stringr)
library(tictoc)
data <- read_csv("2022 PBP.csv")
pitch_sequences <- data %>%
mutate(PITCH_SEQ_TX = str_remove_all(PITCH_SEQ_TX,"[.>123+*N]"),
pitches = paste(str_split(PITCH_SEQ_TX,"")),
pitches = str_remove_all(pitches, "c|\\(|\\\\|\\)|\\\"")) %>%
separate(pitches, paste0("pitch_",1:16), ", ") %>%
select(paste0("pitch_",1:16))
b <- c("B","I","P","V")
s <- c("C","F","K","L","M","O","Q","R","S","T")
get_counts <- function(pitch_sequence){
balls <- 0
strikes <- 0
count_sequence <- as.data.frame(matrix(nrow = 1,ncol = 32))
names(count_sequence) <- c(paste0("balls_",1:16), paste0("strikes_",1:16))
for(i in 1:length(pitch_sequence)){
curr_pitch <- pitch_sequence[i]
if(is.na(curr_pitch)) break
balls <- ifelse(curr_pitch %in% b, balls + 1, balls)
if(curr_pitch %in% s){
if(strikes == 2 & curr_pitch %in% c("F","R")){
strikes = strikes
} else{
strikes = strikes + 1
}
}
if(curr_pitch %in% c("X","Y")){
balls <- "In"
strikes <- "Play"
} else if(curr_pitch == "H"){
balls <- "Hit by"
strikes <- "Pitch"
}
count_sequence[paste0("balls_",i)] <- balls
count_sequence[paste0("strikes_",i)] <- strikes
}
return(count_sequence)
}
count_sequences <- data.frame()
tic()
for(i in 1:10000){
if(i %% 1000 == 0){print(i)}
count_sequences <- rbind(count_sequences,get_counts(pitch_sequences[i,]))
}
toc()
counts <- count_sequences %>%
unite(count_1,c(balls_1,strikes_1),sep = "-") %>%
unite(count_2,c(balls_2,strikes_2),sep = "-") %>%
unite(count_3,c(balls_3,strikes_3),sep = "-") %>%
unite(count_4,c(balls_4,strikes_4),sep = "-") %>%
unite(count_5,c(balls_5,strikes_5),sep = "-") %>%
unite(count_6,c(balls_6,strikes_6),sep = "-") %>%
unite(count_7,c(balls_7,strikes_7),sep = "-") %>%
unite(count_8,c(balls_8,strikes_8),sep = "-") %>%
unite(count_9,c(balls_9,strikes_9),sep = "-") %>%
unite(count_10,c(balls_10,strikes_10),sep = "-") %>%
unite(count_11,c(balls_11,strikes_11),sep = "-") %>%
unite(count_12,c(balls_12,strikes_12),sep = "-") %>%
unite(count_13,c(balls_13,strikes_13),sep = "-") %>%
unite(count_14,c(balls_14,strikes_14),sep = "-") %>%
unite(count_15,c(balls_15,strikes_15),sep = "-") %>%
unite(count_16,c(balls_16,strikes_16),sep = "-") %>%
replace_with_na_all(condition = ~.x == "NA-NA")
library(naniar)
install.packages("naniar")
library(naniar)
counts <- count_sequences %>%
unite(count_1,c(balls_1,strikes_1),sep = "-") %>%
unite(count_2,c(balls_2,strikes_2),sep = "-") %>%
unite(count_3,c(balls_3,strikes_3),sep = "-") %>%
unite(count_4,c(balls_4,strikes_4),sep = "-") %>%
unite(count_5,c(balls_5,strikes_5),sep = "-") %>%
unite(count_6,c(balls_6,strikes_6),sep = "-") %>%
unite(count_7,c(balls_7,strikes_7),sep = "-") %>%
unite(count_8,c(balls_8,strikes_8),sep = "-") %>%
unite(count_9,c(balls_9,strikes_9),sep = "-") %>%
unite(count_10,c(balls_10,strikes_10),sep = "-") %>%
unite(count_11,c(balls_11,strikes_11),sep = "-") %>%
unite(count_12,c(balls_12,strikes_12),sep = "-") %>%
unite(count_13,c(balls_13,strikes_13),sep = "-") %>%
unite(count_14,c(balls_14,strikes_14),sep = "-") %>%
unite(count_15,c(balls_15,strikes_15),sep = "-") %>%
unite(count_16,c(balls_16,strikes_16),sep = "-") %>%
replace_with_na_all(condition = ~.x == "NA-NA")
View(counts)
table(counts$count_1)
which(counts$count_1 == "0-0")
pitch_sequences[1003,]
data[1003,]
data[1003,] -> test
View(test)
test$PITCH_SEQ_TX
pitch_sequences[1003,]
pitch_sequences[1003,]$pitch_1
data$PITCH_SEQ_TX[1003,]
data$PITCH_SEQ_TX[1003]
str_remove_all(data$PITCH_SEQ_TX[1003],"[.>123+*N]")
pitch_sequences <- data %>%
filter(str_length(str_remove_all(data$PITCH_SEQ_TX[1003],"[.>123+*N]")) > 0) %>%
mutate(PITCH_SEQ_TX = str_remove_all(PITCH_SEQ_TX,"[.>123+*N]"),
pitches = paste(str_split(PITCH_SEQ_TX,"")),
pitches = str_remove_all(pitches, "c|\\(|\\\\|\\)|\\\"")) %>%
separate(pitches, paste0("pitch_",1:16), ", ") %>%
select(paste0("pitch_",1:16))
pitch_sequences <- data %>%
filter(str_length(str_remove_all(PITCH_SEQ_TX,"[.>123+*N]")) > 0) %>%
mutate(PITCH_SEQ_TX = str_remove_all(PITCH_SEQ_TX,"[.>123+*N]"),
pitches = paste(str_split(PITCH_SEQ_TX,"")),
pitches = str_remove_all(pitches, "c|\\(|\\\\|\\)|\\\"")) %>%
separate(pitches, paste0("pitch_",1:16), ", ") %>%
select(paste0("pitch_",1:16))
data <- read_csv("2022 PBP.csv") %>%
filter(str_length(str_remove_all(PITCH_SEQ_TX,"[.>123+*N]")) > 0)
pitch_sequences <- data %>%
mutate(PITCH_SEQ_TX = str_remove_all(PITCH_SEQ_TX,"[.>123+*N]"),
pitches = paste(str_split(PITCH_SEQ_TX,"")),
pitches = str_remove_all(pitches, "c|\\(|\\\\|\\)|\\\"")) %>%
separate(pitches, paste0("pitch_",1:16), ", ") %>%
select(paste0("pitch_",1:16))
b <- c("B","I","P","V")
s <- c("C","F","K","L","M","O","Q","R","S","T")
get_counts <- function(pitch_sequence){
balls <- 0
strikes <- 0
count_sequence <- as.data.frame(matrix(nrow = 1,ncol = 32))
names(count_sequence) <- c(paste0("balls_",1:16), paste0("strikes_",1:16))
for(i in 1:length(pitch_sequence)){
curr_pitch <- pitch_sequence[i]
if(is.na(curr_pitch)) break
balls <- ifelse(curr_pitch %in% b, balls + 1, balls)
if(curr_pitch %in% s){
if(strikes == 2 & curr_pitch %in% c("F","R")){
strikes = strikes
} else{
strikes = strikes + 1
}
}
if(curr_pitch %in% c("X","Y")){
balls <- "In"
strikes <- "Play"
} else if(curr_pitch == "H"){
balls <- "Hit by"
strikes <- "Pitch"
}
count_sequence[paste0("balls_",i)] <- balls
count_sequence[paste0("strikes_",i)] <- strikes
}
return(count_sequence)
}
count_sequences <- data.frame()
tic()
for(i in 1:10000){
if(i %% 1000 == 0){print(i)}
count_sequences <- rbind(count_sequences,get_counts(pitch_sequences[i,]))
}
toc()
counts <- count_sequences %>%
unite(count_1,c(balls_1,strikes_1),sep = "-") %>%
unite(count_2,c(balls_2,strikes_2),sep = "-") %>%
unite(count_3,c(balls_3,strikes_3),sep = "-") %>%
unite(count_4,c(balls_4,strikes_4),sep = "-") %>%
unite(count_5,c(balls_5,strikes_5),sep = "-") %>%
unite(count_6,c(balls_6,strikes_6),sep = "-") %>%
unite(count_7,c(balls_7,strikes_7),sep = "-") %>%
unite(count_8,c(balls_8,strikes_8),sep = "-") %>%
unite(count_9,c(balls_9,strikes_9),sep = "-") %>%
unite(count_10,c(balls_10,strikes_10),sep = "-") %>%
unite(count_11,c(balls_11,strikes_11),sep = "-") %>%
unite(count_12,c(balls_12,strikes_12),sep = "-") %>%
unite(count_13,c(balls_13,strikes_13),sep = "-") %>%
unite(count_14,c(balls_14,strikes_14),sep = "-") %>%
unite(count_15,c(balls_15,strikes_15),sep = "-") %>%
unite(count_16,c(balls_16,strikes_16),sep = "-") %>%
replace_with_na_all(condition = ~.x == "NA-NA")
table(counts$count_1)
table(counts$count_2)
table(counts$count_3)
table(counts$count_4)
count_sequences <- data.frame()
tic()
for(i in 1:nrow(pitch_sequences)){
if(i %% 1000 == 0){print(i)}
count_sequences <- rbind(count_sequences,get_counts(pitch_sequences[i,]))
}
count_sequences <- apply(count_sequences, 1, get_counts)
View(count_sequences)
count_sequences <- apply(count_sequences, 2, get_counts)
count_sequences <- apply(pitch_sequences, 1, get_counts)
View(count_sequences)
count_sequences %>% unlist()
View(count_sequences)
count_sequences[[1:2]]
count_sequences[1:2]
count_sequences[1:2] %>% as.data.frame()
count_sequences[1:2] %>% as.data.frame() -> test
View(test)
count_sequences <- apply(pitch_sequences, c(1,2), get_counts)
count_sequences <- count_sequences %>%
map_df(as_tibble)
count_sequences <- apply(pitch_sequences[1:1000,], 1, get_counts)
count_sequences <- count_sequences %>%
map_df(as_tibble)
count_sequences <- bind_rows(count_sequences)
View(count_sequences)
get_counts <- function(pitch_sequence){
balls <- 0
strikes <- 0
count_sequence <- as.data.frame(matrix(nrow = 1,ncol = 32))
names(count_sequence) <- c(paste0("balls_",1:16), paste0("strikes_",1:16))
for(i in 1:length(pitch_sequence)){
curr_pitch <- pitch_sequence[i]
if(is.na(curr_pitch)) break
balls <- ifelse(curr_pitch %in% b, balls + 1, balls)
if(curr_pitch %in% s){
if(strikes == 2 & curr_pitch %in% c("F","R")){
strikes = strikes
} else{
strikes = strikes + 1
}
}
if(curr_pitch %in% c("X","Y")){
balls <- 9
strikes <- 9
} else if(curr_pitch == "H"){
balls <- 10
strikes <- 10
}
count_sequence[paste0("balls_",i)] <- balls
count_sequence[paste0("strikes_",i)] <- strikes
}
return(count_sequence)
}
count_sequences <- apply(pitch_sequences[1:1000,], 1, get_counts)
count_sequences <- bind_rows(count_sequences)
count_sequences <- apply(pitch_sequences, 1, get_counts)
count_sequences <- bind_rows(count_sequences)
counts <- count_sequences %>%
unite(count_1,c(balls_1,strikes_1),sep = "-") %>%
unite(count_2,c(balls_2,strikes_2),sep = "-") %>%
unite(count_3,c(balls_3,strikes_3),sep = "-") %>%
unite(count_4,c(balls_4,strikes_4),sep = "-") %>%
unite(count_5,c(balls_5,strikes_5),sep = "-") %>%
unite(count_6,c(balls_6,strikes_6),sep = "-") %>%
unite(count_7,c(balls_7,strikes_7),sep = "-") %>%
unite(count_8,c(balls_8,strikes_8),sep = "-") %>%
unite(count_9,c(balls_9,strikes_9),sep = "-") %>%
unite(count_10,c(balls_10,strikes_10),sep = "-") %>%
unite(count_11,c(balls_11,strikes_11),sep = "-") %>%
unite(count_12,c(balls_12,strikes_12),sep = "-") %>%
unite(count_13,c(balls_13,strikes_13),sep = "-") %>%
unite(count_14,c(balls_14,strikes_14),sep = "-") %>%
unite(count_15,c(balls_15,strikes_15),sep = "-") %>%
unite(count_16,c(balls_16,strikes_16),sep = "-") %>%
replace_with_na_all(condition = ~.x == "NA-NA")
get_counts <- function(pitch_sequence){
balls <- 0
strikes <- 0
count_sequence <- as.data.frame(matrix(nrow = 1,ncol = 16))
names(count_sequence) <- c(paste0("count_",1:16))
for(i in 1:length(pitch_sequence)){
curr_pitch <- pitch_sequence[i]
if(is.na(curr_pitch)) break
balls <- ifelse(curr_pitch %in% b, balls + 1, balls)
if(curr_pitch %in% s){
if(strikes == 2 & curr_pitch %in% c("F","R")){
strikes = strikes
} else{
strikes = strikes + 1
}
}
if(curr_pitch %in% c("X","Y")){
balls <- 9
strikes <- 9
} else if(curr_pitch == "H"){
balls <- 10
strikes <- 10
}
count_sequence[paste0("count_",i)] <- paste(balls,strikes,sep = "-")
}
return(count_sequence)
}
count_sequences <- apply(pitch_sequences, 1, get_counts)
count_sequences <- apply(pitch_sequences[1:1000,], 1, get_counts)
count_sequences <- bind_rows(count_sequences)
table(cou\)
table(count_sequences$count_1)
table(count_sequences$count_2)
?mutate_all
count_sequences <- apply(pitch_sequences, 1, get_counts)
count_sequences <- bind_rows(count_sequences)
pbp_with_counts <- cbind(data,count_sequences)
write_csv(pbp_with_counts, "2022 PBP with Counts.csv")
library(tidyverse)
setwd("C:/Users/tmkin/Downloads/Projects/MLB Pitch Sequence Flowchart")
data <- read_csv("2022 PBP with Counts.csv")
data <- read_csv("2022 PBP with Counts.csv")
library(plotly)
install.packages("plotly")
library(plotly)
find_proportions <- function(data, count, sankey = FALSE){
pitches <- sum(as.numeric(str_split(count,"-")[[1]]))
if(count == "0-0"){
freq <- table(data["count_1"]) %>%
as.data.frame() %>%
filter(count_1 != "0-0" & !(count_1 %in% c("In-Play","Hit by-Pitch")))
} else{
temp <- data %>%
filter(eval(parse(text = paste0("count_",pitches))) == count &
!(eval(parse(text = paste0("count_",pitches + 1))) %in% c(count,"In-Play","Hit by-Pitch")))
freq <- table(temp[paste0("count_",pitches + 1)]) %>%
as.data.frame()
}
freq <- freq %>%
mutate(Prop = round(Freq / (sum(Freq)),3))
str <- ""
for(i in 1:nrow(freq)){
str <- paste0(str, count, " [", freq$Prop[i], "] ", freq[i, paste0("count_", pitches + 1)], "\n")
df <- data.frame(start = rep(count,2),
end = freq[,1],
prop = freq$Prop)
}
if(sankey == TRUE){
return(cat(str))
} else{
return(df)
}
}
props <- data.frame()
for(i in c("0-0","0-1","0-2","1-0","1-1","1-2","2-0","2-1","2-2","3-0","3-1","3-2")){
props <- rbind(props, find_proportions(data, i))
}
View(props)
data[which(data == "9-9")]
which(data == "9-9")
data <- read_csv("2022 PBP with Counts.csv")%>%
mutate_all(funs(str_replace(., "9-9", "In Play")),
funs(str_replace(., "10-10", "HBP")))
?mutate_all
str_replace_all(data[1,],"9-9","BIP")
113-16
str_replace_all(data[1,98:113],"9-9","BIP")
str_replace_all(data[1:100,98:113],"9-9","BIP")
98:113
data <- read_csv("2022 PBP with Counts.csv") %>%
mutate(across(98:113), str_replace(., "9-9","BIP"))
table(data$count_1)
str_replace(data[98:113],"9-9","BIP")
data <- read_csv("2022 PBP with Counts.csv") %>%
mutate(across(paste0("count_",1:16), str_replace_all, "9-9", "BIP"))
table(data$count_1)
data <- read_csv("2022 PBP with Counts.csv") %>%
mutate(across(paste0("count_",1:16), str_replace_all, "9-9", "BIP")) %>%
mutate(across(paste0("count_",1:16), str_replace_all, "10-10", "HBP"))
find_proportions <- function(data, count){
pitches <- sum(as.numeric(str_split(count,"-")[[1]]))
if(count == "0-0"){
freq <- table(data["count_1"]) %>%
as.data.frame() %>%
filter(count_1 != "0-0" & !(count_1 %in% c("In-Play","Hit by-Pitch")))
} else{
temp <- data %>%
filter(eval(parse(text = paste0("count_",pitches))) == count &
!(eval(parse(text = paste0("count_",pitches + 1))) %in% c(count,"In-Play","Hit by-Pitch")))
freq <- table(temp[paste0("count_",pitches + 1)]) %>%
as.data.frame()
}
freq <- freq %>%
mutate(Prop = round(Freq / (sum(Freq)),3))
str <- ""
for(i in 1:nrow(freq)){
str <- paste0(str, count, " [", freq$Prop[i], "] ", freq[i, paste0("count_", pitches + 1)], "\n")
df <- data.frame(start = rep(count,2),
end = freq[,1],
prop = freq$Prop)
}
}
find_proportions(data,"0-0")
find_proportions(data,"0-0") -> test
find_proportions <- function(data, count){
pitches <- sum(as.numeric(str_split(count,"-")[[1]]))
if(count == "0-0"){
freq <- table(data["count_1"]) %>%
as.data.frame() %>%
filter(count_1 != "0-0" & !(count_1 %in% c("In-Play","Hit by-Pitch")))
} else{
temp <- data %>%
filter(eval(parse(text = paste0("count_",pitches))) == count &
!(eval(parse(text = paste0("count_",pitches + 1))) %in% c(count,"In-Play","Hit by-Pitch")))
freq <- table(temp[paste0("count_",pitches + 1)]) %>%
as.data.frame()
}
freq <- freq %>%
mutate(Prop = round(Freq / (sum(Freq)),3))
str <- ""
for(i in 1:nrow(freq)){
str <- paste0(str, count, " [", freq$Prop[i], "] ", freq[i, paste0("count_", pitches + 1)], "\n")
df <- data.frame(start = rep(count,2),
end = freq[,1],
prop = freq$Prop)
}
return(df)
}
test <- find_proportions(data,"0-0")
test
